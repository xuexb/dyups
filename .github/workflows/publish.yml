name: Publish

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

env:
  IMAGE_NAME: ${{ github.repository }}
  CONTAINER_NAME: dyups

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.meta.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_READ_WRITE_USERNAME }}
          password: ${{ secrets.GHCR_READ_WRITE_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ env.IMAGE_NAME }}
          flavor: |
            latest=true
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  depoly:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: ${{ needs.build-and-push-image.result == 'success' }}
    steps:
      - name: Load credentials
        id: load_secret
        uses: 1password/load-secrets-action@v3
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          SSH_HOST: "op://ecs-cicd/dyups-agent/mjqbkhplbfjdp6eacrvkr36hsa/host"
          SSH_USERNAME: "op://ecs-cicd/dyups-agent/mjqbkhplbfjdp6eacrvkr36hsa/username"
          SSH_KEY: "op://ecs-cicd/dyups-agent/private_key"
          SSH_PORT: "op://ecs-cicd/dyups-agent/mjqbkhplbfjdp6eacrvkr36hsa/port"
      - name: Deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ steps.load_secrets.SSH_HOST }}
          username: ${{ steps.load_secrets.SSH_USERNAME }}
          key: ${{ steps.load_secrets.SSH_KEY }}
          port: ${{ steps.load_secrets.SSH_PORT }}
          command_timeout: 30m
          script: |
            docker pull ghcr.io/xuexb/dyups:${{ needs.build-and-push-image.outputs.version }} \
              && (docker ps -aq --filter "name=^${{ env.CONTAINER_NAME }}$" | xargs docker rm -f || echo "Delete fail") \
              && docker run \
              --restart=always \
              -p 80:80 \
              -p 443:443 \
              -d \
              --name "${{ env.CONTAINER_NAME }}" \
              --env "DYUPS_TOKEN=${{ secrets.DYUPS_TOKEN }}" \
              --env "DYUPS_DB_HOST=${{ secrets.DYUPS_DB_HOST }}" \
              --env "DYUPS_DB_PORT=${{ secrets.DYUPS_DB_PORT }}" \
              --env "DYUPS_DB_DATABASE=${{ secrets.DYUPS_DB_DATABASE }}" \
              --env "DYUPS_DB_USER=${{ secrets.DYUPS_DB_USER }}" \
              --env "DYUPS_DB_PASSWORD=${{ secrets.DYUPS_DB_PASSWORD }}" \
              --env "DYUPS_DB_CHARSET=${{ secrets.DYUPS_DB_CHARSET }}" \
              ghcr.io/xuexb/dyups:${{ needs.build-and-push-image.outputs.version }} \
            && sleep 2 \
            && if [ "$(curl -sL -w '%{http_code}' -H 'host: dyups' -H 'x-dyups-token: ${{ secrets.DYUPS_TOKEN }}' --connect-timeout 3 127.0.0.1/api/reload?r=$RANDOM -o /dev/null)" != "200" ]; then exit 2; fi \
            && sleep 5
