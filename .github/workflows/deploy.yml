name: Deploy
on:
  workflow_call:
    inputs:
      envname:
        description: '部署环境'
        default: 'test'
        type: string
        required: false
      version:
        description: '部署版本'
        default: 'latest'
        type: string
        required: false
    secrets:
      SSH_HOST_DEV:
        required: true
      SSH_USERNAME_DEV:
        required: true
      SSH_KEY_DEV:
        required: true
      SSH_PORT_DEV:
        required: true
      SSH_HOST_PRD:
        required: true
      SSH_USERNAME_PRD:
        required: true
      SSH_KEY_PRD:
        required: true
      SSH_PORT_PRD:
        required: true
      DYUPS_TOKEN:
        required: true
      DYUPS_DB_HOST:
        required: true
      DYUPS_DB_PORT:
        required: true
      DYUPS_DB_DATABASE:
        required: true
      DYUPS_DB_USER:
        required: true
      DYUPS_DB_PASSWORD:
        required: true
      DYUPS_DB_CHARSET:
        required: true
      GHCR_MIRROR:
        required: true
  workflow_dispatch:
    inputs:
      envname:
        description: '部署环境'
        default: 'test'
        type: choice
        required: false
        options:
          - test
          - prd
      version:
        description: '部署版本'
        default: 'latest'
        type: string
        required: false

env:
  IMAGE_VERSION: ${{ inputs.version || github.event.inputs.version }}
  ENV_NAME: ${{ inputs.envname || github.event.inputs.envname }}
  MIRROR_REPOSITORY_TAG: ${{ secrets.GHCR_MIRROR }}/xuexb/dyups:${{ inputs.version || github.event.inputs.version }}
  CONTAINER_NAME: dyups

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: set env
        run: |
          if [ "${{ env.ENV_NAME }}" == "test" ]; then
            echo "SSH_HOST=${{ secrets.SSH_HOST_DEV }}" >> $GITHUB_ENV
            echo 'SSH_KEY<<EOF' >> $GITHUB_ENV
            echo "${{ secrets.SSH_KEY_DEV }}" >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
            echo "SSH_USERNAME=${{ secrets.SSH_USERNAME_DEV }}" >> $GITHUB_ENV
            echo "SSH_PORT=${{ secrets.SSH_PORT_DEV }}" >> $GITHUB_ENV
          else
            echo "SSH_HOST=${{ secrets.SSH_HOST_PRD }}" >> $GITHUB_ENV
            echo 'SSH_KEY<<EOF' >> $GITHUB_ENV
            echo "${{ secrets.SSH_KEY_PRD }}" >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
            echo "SSH_USERNAME=${{ secrets.SSH_USERNAME_PRD }}" >> $GITHUB_ENV
            echo "SSH_PORT=${{ secrets.SSH_PORT_PRD }}" >> $GITHUB_ENV
          fi
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          command_timeout: 30m
          script: |
            docker pull ${{ env.MIRROR_REPOSITORY_TAG }} \
              && (docker ps -aq --filter "name=^${{ env.CONTAINER_NAME }}$" | xargs docker rm -f || echo "Delete fail") \
              && docker run \
                -p 80:80 \
                -p 443:443 \
                --rm \
                -d \
                --name "${{ env.CONTAINER_NAME }}" \
                --env "DYUPS_TOKEN=${{ secrets.DYUPS_TOKEN }}" \
                --env "DYUPS_DB_HOST=${{ secrets.DYUPS_DB_HOST }}" \
                --env "DYUPS_DB_PORT=${{ secrets.DYUPS_DB_PORT }}" \
                --env "DYUPS_DB_DATABASE=${{ secrets.DYUPS_DB_DATABASE }}" \
                --env "DYUPS_DB_USER=${{ secrets.DYUPS_DB_USER }}" \
                --env "DYUPS_DB_PASSWORD=${{ secrets.DYUPS_DB_PASSWORD }}" \
                --env "DYUPS_DB_CHARSET=${{ secrets.DYUPS_DB_CHARSET }}" \
                ${{ env.MIRROR_REPOSITORY_TAG }} \
            && sleep 2 \
            && if [ "$(curl -sL -w '%{http_code}' -H 'host: dyups' -H 'x-dyups-token: ${{ secrets.DYUPS_TOKEN }}' --connect-timeout 3 127.0.0.1/api/reload?r=$RANDOM -o /dev/null)" != "200" ]; then exit 2; fi