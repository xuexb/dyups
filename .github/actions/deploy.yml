name: "deploy"
description: "Deploy with ssh"
inputs:
  version:
    description: 'deploy version'
    default: 'latest'
    required: false
  ssh-host:
    description: "SSH HOST"
    required: true
  ssh-port:
    description: "SSH Port"
    required: true
  ssh-username:
    description: "SSH Username"
    required: true
  ssh-key:
    description: "SSH private key"
    required: true
  proxy-host:
    description: "SSH Porxy HOST"
    required: true
  proxy-port:
    description: "SSH Porxy Port"
    required: true
  proxy-username:
    description: "SSH Porxy Username"
    required: true
  proxy-key:
    description: "SSH Porxy private key"
    required: true
  dyups-token:
    description: "dyups token"
    required: true
  dyups-db-host:
    description: "dyups MySQL host"
    required: true
  dyups-db-port:
    description: "dyups MySQL port"
    required: true
  dyups-db-database:
    description: "dyups MySQL database"
    required: true
  dyups-db-user:
    description: "dyups MySQL user"
    required: true
  dyups-db-password:
    description: "dyups MySQL password"
    required: true
  dyups-db-charset:
    description: "dyups MySQL charset"
    required: true
  ghcr-mirror:
    description: "ghcr mirror"
    required: true
  container-name:
    description: "docker container name"
    default: "dyups"
    required: false

runs:
  using: "composite"
  steps:
    - name: Deploy
      uses: appleboy/ssh-action@dce9d565de8d876c11d93fa4fe677c0285a66d78
      with:
        host: ${{ inputs.ssh-host }}
        username: ${{ inputs.ssh-username }}
        key: ${{ inputs.ssh-key }}
        port: ${{ inputs.ssh-port }}
        proxy_host: ${{ inputs.proxy-host }}
        proxy_username: ${{ inputs.proxy-username }}
        proxy_key: ${{ inputs.proxy-key }}
        proxy_port: ${{ inputs.proxy-port }}
        command_timeout: 30m
        script: |
          docker pull ${{ inputs.ghcr-mirror }}/xuexb/dyups:${{ inputs.version }} \
            && (docker ps -aq --filter "name=^${{ inputs.container-name }}$" | xargs docker rm -f || echo "Delete fail") \
            && docker run \
            -p 80:80 \
            -p 443:443 \
            -d \
            --name "${{ inputs.container-name }}" \
            --env "DYUPS_TOKEN=${{ inputs.dyups-token }}" \
            --env "DYUPS_DB_HOST=${{ inputs.dyups-db-host }}" \
            --env "DYUPS_DB_PORT=${{ inputs.dyups-db-port }}" \
            --env "DYUPS_DB_DATABASE=${{ inputs.dyups-db-database }}" \
            --env "DYUPS_DB_USER=${{ inputs.dyups-db-user }}" \
            --env "DYUPS_DB_PASSWORD=${{ inputs.dyups-db-password }}" \
            --env "DYUPS_DB_CHARSET=${{ inputs.dyups-db-charset }}" \
            ${{ inputs.ghcr-mirror }}/xuexb/dyups:${{ inputs.version }} \
          && sleep 2 \
          && if [ "$(curl -sL -w '%{http_code}' -H 'host: dyups' -H 'x-dyups-token: ${{ inputs.dyups-token }}' --connect-timeout 3 127.0.0.1/api/reload?r=$RANDOM -o /dev/null)" != "200" ]; then exit 2; fi \
          && sleep 5
