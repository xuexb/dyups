server {
    listen       502;
    server_name 127.0.0.1;

    access_log off;
    error_log off;

    location / {
        return 502;
    }
}

server {
    listen       80;
    server_name dyups.xuexb.com dyups 127.0.0.1;

    set_by_lua $DYUPS_TOKEN 'return os.getenv("DYUPS_TOKEN")';
    set $tokens "";
    if ($cookie_x_dyups_token != $DYUPS_TOKEN) {
        set $tokens "$tokens\0";
    }
    if ($http_x_dyups_token != $DYUPS_TOKEN) {
        set $tokens "$tokens\0";
    }
    if ($arg_token != $DYUPS_TOKEN) {
        set $tokens "$tokens\0";
    }
    if ($tokens = "\0\0\0") {
        return 403;
    }

    more_set_headers 'cache-control: no-store';

    error_page 403 404 @4xx;
    location @4xx {
        default_type  application/json;
        content_by_lua_block {
            local cjson = require("cjson")
            ngx.say(cjson.encode({
                success = false,
                code = ngx.status
            }))
        }
    }

    error_page 500 502 504 @5xx;
    location @5xx {
        default_type  application/json;
        content_by_lua_block {
            local cjson = require("cjson")
            ngx.say(cjson.encode({
                success = false,
                code = ngx.status
            }))
        }
    }

    location = /api/all {
        default_type  application/json;
        content_by_lua_block {
            local cjson = require("cjson")
            local dyups = require("dyups.api")
            local data = dyups:getAll()
            if not data then
                ngx.say(cjson.encode({
                    success = false,
                    code = -1
                }))
            else
                setmetatable(data, cjson.empty_array_mt)
                ngx.say(cjson.encode({
                    success = true,
                    code = 0,
                    data = data
                }))
            end
        }
    }

    location = /api/reload {
        default_type  application/json;
        content_by_lua_block {
            local cjson = require("cjson")
            local dyups = require("dyups.api")
            local data = dyups:reload()
            if not data then
                ngx.say(cjson.encode({
                    success = false,
                    code = 500
                }))
            else
                ngx.say(cjson.encode({
                    success = true,
                    code = 0
                }))
            end
        }
    }

    location = /api/sync {
        default_type  application/json;
        content_by_lua_block {
            local cjson = require("cjson")
            local dyups = require("dyups.api")
            local data = dyups:sync()
            if not data then
                ngx.say(cjson.encode({
                    success = false,
                    code = 500
                }))
            else
                ngx.say(cjson.encode({
                    success = true,
                    code = 0,
                    data = data
                }))
            end
        }
    }

    location ~* "^/api/(?<domain>[^\/]+)$" {
        default_type  application/json;
        content_by_lua_block {
            local cjson = require("cjson")
            local dyups = require("dyups.api")
            local method = ngx.req.get_method()
            local domain = ngx.var.domain
            if method == "DELETE" then
                local data = dyups:removeDomain(domain)
                local sync = dyups:sync()
                if not sync then
                    return ngx.say(cjson.encode({
                        success = false,
                        code = 500
                    }))
                end
                ngx.say(cjson.encode({
                    success = true,
                    code = 0,
                    data = {
                        sync = sync
                    }
                }))
            elseif method == "GET" then
                local data = dyups:getByDomain(domain)
                if not data then
                    ngx.say(cjson.encode({
                        success = false,
                        code = 404
                    }))
                else
                    ngx.say(cjson.encode({
                        success = true,
                        code = 0,
                        data = data
                    }))
                end
            elseif method == "POST" then
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                if not data then
                    return ngx.say(cjson.encode({
                        success = false,
                        code = 402,
                        message = "need post data"
                    }))
                end
                local data = cjson.decode(data)
                if not data then
                    return ngx.say(cjson.encode({
                        success = false,
                        code = 402,
                        message = "need post JSON"
                    }))
                end
                local server = data
                local timeout = 0
                if data.timeout and data.server then
                    server = data.server
                    timeout = data.timeout
                end
                local data = dyups:addDomain(domain, cjson.encode(server), timeout)
                if not data then
                    return ngx.say(cjson.encode({
                        success = false,
                        code = 500
                    }))
                else
                    local sync = dyups:sync()
                    if not sync then
                        return ngx.say(cjson.encode({
                            success = false,
                            code = 501
                        }))
                    end
                    return ngx.say(cjson.encode({
                        success = true,
                        code = 0,
                        data = {
                            sync = sync
                        }
                    }))
                end
            else
                ngx.say(cjson.encode({
                    success = false,
                    code = 403
                }))
            end
        }
    }
}