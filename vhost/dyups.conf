server {
    listen       80;
    server_name localhost 127.0.0.1 dyups.xuexb.com dyups;

    include inc/4xx.conf;
    include inc/5xx.conf;
    
    set_by_lua $DYUPS_TOKEN 'return os.getenv("DYUPS_TOKEN")';

    location / {
        more_set_headers 'cache-control: no-store';
        if ($arg_token != $DYUPS_TOKEN) {
            return 403;
        }
        dyups_interface;
    }

    location /update {
        more_set_headers 'cache-control: no-store';
        if ($arg_token != $DYUPS_TOKEN) {
            return 403;
        }
        content_by_lua_block {
            local _M = {}

            function _M.trim(input)
                return (string.gsub(input, "^%s*(.-)%s*$", "%1"))
            end
            function _M.rtrim(input)
                return (string.gsub(input, "[ \t\n\r]+$", ""))
            end
            function _M.readfile(filepath)
                local file = io.open(filepath, "r")
                if not file then
                    return "";
                end
                local content = file:read("*a")
                file:close()
                return content
            end
            function _M.parse(input)
                local str = string.gsub(input, "#[^\n]*\n", "")
                local cache = {}
                local result = ""

                for matched in string.gmatch(str, "upstream [^}]+}") do
                    local _, _, name, block = string.find(matched, "upstream%s+([%w_%.]+)%s*{([^}]+)}");
                    local trimblock = ""
                    string.gsub(block, "\n[^\n]+", function(w, i)
                        if (_M.trim(w) ~= "") then
                        trimblock = trimblock .. "    " .. _M.trim(w) .. "\n"
                        end
                    end)
                    cache[name] = trimblock;
                end

                for k, v in pairs(cache) do
                    result = result .. string.format("upstream %s {\n%s\n}", k, _M.rtrim(v)) .. "\n"
                end
                return result
            end

            local filepath = "/etc/nginx/inc/ups.conf"
            local res, err = ngx.location.capture("/list", {
                args = { token = ngx.var.arg_token }
            })
            if res.status == 200 or res.status == 204 then
                local cache = _M.readfile(filepath)
                local file, err = io.open(filepath, "w+");
                if not file then
                    ngx.log(ngx.ERR, "写入 ups.conf 失败，err=", err)
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end
                local conent = _M.parse(cache .. "\n" .. res.body);
                file:write(conent)
                file:flush()
                file:close()
                ngx.print("success")
            else
                ngx.log(ngx.ERR, "获取 ups 失败，状态码：", res.status)
                ngx.print("error")
            end
        }
    }
}